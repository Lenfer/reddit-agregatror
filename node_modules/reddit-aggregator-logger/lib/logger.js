'use strict';

/**
 * Модуль предоставляющий интерфейс для записи сообщений с разным уровнем в лог
 *
 * !является точкой для реализации механизма логирования для всего приложения
 */


const _ = require('lodash');
const moment = require('moment');

const config = require('reddit-aggregator-config');
const dateFormat = _.get(config, 'logger.dateFormat');

/**
 * Форматирование сообщения
 * @param {Object} options Объект с параметрами
 * @param {String} options.req Объект пользовательского запроса
 * @param {String} options.name Тэг
 * @param {String} options.message Сообщение
 * @param {Any} options.meta Доп. данные
 * @returns {Strign}
 */
function formatMessage(options) {
	let reqId = _.get(options, 'req.requestId', '');
	let meta = options.meta || '';
	let name = options.name || '';
	let message = options.message || '';
	if (_.isObject(meta)) {
		meta = JSON.stringify(meta);
	}
	return [
		moment().format(dateFormat),
		reqId,
		name,
		message,
		meta
	].join(' ');
}


/**
 * Возвращает объект с методами для записи в лог
 * @param {String} name Имя тэга для логера
 * @returns {Object}
 */
function getLogger (name) {
	return _.reduce(['info', 'warn', 'error'], function(result, logLevel) {
		result[logLevel] = function(req, message, meta) {
			console[logLevel](formatMessage({
				req: req,
				name: name,
				message: message,
				meta: meta
			}));
		}
		return result;
	}, {});
};


module.exports = getLogger;


